name: CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'autoprepml/**'
      - 'tests/**'
      - 'setup.py'
      - 'pyproject.toml'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'autoprepml/**'
      - 'tests/**'
      - 'setup.py'
      - 'pyproject.toml'
      - '.github/workflows/ci.yml'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Cache ruff
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-ruff-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-ruff-
    
    - name: Install ruff
      run: pip install ruff
    
    - name: Lint with ruff
      run: ruff check autoprepml/
      continue-on-error: true

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        # Full matrix: all Python versions on all OS
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
        include:
          # Python 3.13 on all OS - EXPERIMENTAL
          # Known issue: pandas Cython-generated C++ code incompatible with Python 3.13
          # Error: "standard attributes in middle of decl-specifiers" during pandas compilation
          # Waiting for pandas upstream fix. Safe to ignore - our code is compatible.
          - os: ubuntu-latest
            python-version: '3.13'
            experimental: true
          - os: macos-latest
            python-version: '3.13'
            experimental: true
          - os: windows-latest
            python-version: '3.13'
            experimental: true
    # Allow Windows and Python 3.13 to fail without breaking CI
    continue-on-error: ${{ matrix.experimental == true || matrix.os == 'windows-latest' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'setup.py'
        allow-prereleases: true
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/Library/Caches/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('setup.py', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e ".[dev,viz,llm]"
    
    - name: Debug Environment
      shell: bash
      run: |
        echo "Python version:"
        python --version
        echo "Platform info:"
        python -m platform
        echo "Installed packages:"
        pip list
        echo "Working directory:"
        pwd
        ls -la
    
    - name: Clear pytest cache
      shell: bash
      run: |
        rm -rf .pytest_cache || true
        find . -type d -name "__pycache__" -exec rm -rf {} + || true
    
    - name: Run tests with pytest
      id: run_tests
      shell: bash
      run: |
        pytest tests/ -v --cov=autoprepml --cov-report=xml --cov-report=term --maxfail=1 --tb=short 2>&1 | tee pytest.log
      continue-on-error: ${{ matrix.experimental == true }}
    
    - name: Upload test logs if failed
      if: failure() && steps.run_tests.outcome == 'failure'
      uses: actions/upload-artifact@v4
      with:
        name: failed-test-logs-${{ matrix.os }}-py${{ matrix.python-version }}-${{ github.run_id }}
        path: |
          pytest.log
          .pytest_cache/
        retention-days: 7
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      continue-on-error: true

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Cache build tools
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-build-${{ hashFiles('setup.py') }}
        restore-keys: |
          ${{ runner.os }}-build-
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/
        retention-days: 7
